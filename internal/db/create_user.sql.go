// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: create_user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, bio, birth_date, last_location_long, last_location_lat,
  mobile, last_active, email, sex, interested_in
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, name, bio, birth_date, last_location_long, last_location_lat, mobile, last_active, email, sex, interested_in, created_at
`

type CreateUserParams struct {
	Name             string
	Bio              sql.NullString
	BirthDate        time.Time
	LastLocationLong sql.NullString
	LastLocationLat  sql.NullString
	Mobile           sql.NullString
	LastActive       sql.NullTime
	Email            sql.NullString
	Sex              interface{}
	InterestedIn     int16
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Bio,
		arg.BirthDate,
		arg.LastLocationLong,
		arg.LastLocationLat,
		arg.Mobile,
		arg.LastActive,
		arg.Email,
		arg.Sex,
		arg.InterestedIn,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.BirthDate,
		&i.LastLocationLong,
		&i.LastLocationLat,
		&i.Mobile,
		&i.LastActive,
		&i.Email,
		&i.Sex,
		&i.InterestedIn,
		&i.CreatedAt,
	)
	return i, err
}
