// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: update_user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const updateUser = `-- name: UpdateUser :one
UPDATE users
  set name = $11,
  bio = $10,
  birth_date = $9,
  last_location_long = $8,
  last_location_lat = $7,
  mobile = $6,
  last_active = $5,
  email = $4,
  sex = $3,
  interested_in = $2
WHERE id = $1
RETURNING id, name, bio, birth_date, last_location_long, last_location_lat, mobile, last_active, email, sex, interested_in, created_at
`

type UpdateUserParams struct {
	ID               int64          `json:"id"`
	InterestedIn     int16          `json:"interested_in"`
	Sex              interface{}    `json:"sex"`
	Email            string         `json:"email"`
	LastActive       sql.NullTime   `json:"last_active"`
	Mobile           string         `json:"mobile"`
	LastLocationLat  sql.NullString `json:"last_location_lat"`
	LastLocationLong sql.NullString `json:"last_location_long"`
	BirthDate        time.Time      `json:"birth_date"`
	Bio              string         `json:"bio"`
	Name             string         `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.InterestedIn,
		arg.Sex,
		arg.Email,
		arg.LastActive,
		arg.Mobile,
		arg.LastLocationLat,
		arg.LastLocationLong,
		arg.BirthDate,
		arg.Bio,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.BirthDate,
		&i.LastLocationLong,
		&i.LastLocationLat,
		&i.Mobile,
		&i.LastActive,
		&i.Email,
		&i.Sex,
		&i.InterestedIn,
		&i.CreatedAt,
	)
	return i, err
}
